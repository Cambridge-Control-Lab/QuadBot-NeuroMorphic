dt = 1e-3;
runtime=30;
num_steps=floor(runtime/dt);

t1=1.5;
t2=190;

% Constants to vary. Please refer to 'QuadCentreForCharacterising.slx'
P=-40; % GB_B
Q_array = -40:0.5:-20; % GB_C
R_array = -40:0.5:-20; % GB_D
S=-40; % GB_A

% Create meshgrid for Q and R
[Q_grid,R_grid] = meshgrid(Q_array, R_array);

% Create empty 2D arrays to store results
AC_latency_grid = zeros(size(Q_grid));
AC_phase_diff_grid = zeros(size(Q_grid));
AD_latency_grid = zeros(size(Q_grid));
AD_phase_diff_grid = zeros(size(Q_grid));

% Lengths to track for loops
length_Q = length(Q_grid);
length_R = length(R_grid);

for i = 1:length_Q
    Q = Q_array(i);
    for j = 1:length_R
        R = R_array(j);
        
        % Simulate
        simOut = sim('QuadCentreForCharacterising.slx');
        
        % Extract data from the simulation output
        spike_data_A = simOut.spikes_A.data;
        spike_data_C = simOut.spikes_C.data;
        spike_data_D = simOut.spikes_D.data;
        
        % Characterise the spike trains
        [AC_latency, AC_phase_diff] = characterise_latency(dt, spike_data_A, spike_data_C);
        [AD_latency, AD_phase_diff] = characterise_latency(dt, spike_data_A, spike_data_D);

        % Store the computed values in the grid
        AC_latency_grid(j, i) = AC_latency;
        AC_phase_diff_grid(j, i) = AC_phase_diff;
        AD_latency_grid(j, i) = AD_latency;
        AD_phase_diff_grid(j, i) = AD_phase_diff;
    end
end

% Plotting all the contour plots in one figure

% Create a new figure
figure('Position', [100, 100, 1200, 800]);

% Plot
subplot(2, 2, 1);
contourf(Q_grid, R_grid, AC_latency_grid, 'LineColor', 'none', 'LineStyle', 'none');
colorbar;
xlabel('Synaptic Gate Threshold C, GB\_C');
ylabel('Synaptic Gate Threshold, GB\_D');
title('AC Burst Latency (s)', 'FontSize', 10, 'Interpreter', 'latex');

subplot(2, 2, 2);
contourf(Q_grid, R_grid, AC_phase_diff_grid, 'LineColor', 'none', 'LineStyle', 'none');
colorbar;
xlabel('Synaptic Gate Threshold C, GB\_C');
ylabel('Synaptic Gate Threshold, GB\_D');
title('AC Phase Difference (deg)', 'FontSize', 10, 'Interpreter', 'latex');

subplot(2, 2, 3);
contourf(Q_grid, R_grid, AD_latency_grid, 'LineColor', 'none', 'LineStyle', 'none');
colorbar;
xlabel('Synaptic Gate Threshold C, GB\_C');
ylabel('Synaptic Gate Threshold, GB\_D');
title('AD Burst Latency (s)', 'FontSize', 10, 'Interpreter', 'latex');

subplot(2, 2, 4);
contourf(Q_grid, R_grid, AD_phase_diff_grid, 'LineColor', 'none', 'LineStyle', 'none');
colorbar;
xlabel('Synaptic Gate Threshold C, GB\_C');
ylabel('Synaptic Gate Threshold, GB\_D');
title('AD Phase Difference (deg)','FontSize', 10);
colormap('parula');

% Adjust Layout
sgtitle(['QuadCentre Variations with GB\_C and GB\_D, ($\tau_s = 1.5, \tau_{us} = 190$)'], 'FontSize', 14, 'Interpreter', 'latex');
set(gcf, 'Color', 'w');
set(findall(gcf, 'type', 'axes'), 'FontSize', 10);

P=-40; % GB_B
Q_array = -40; % GB_C
R_array = -40; % GB_D
S=-40; % GB_A

% Constants to vary
G = 35:2.5:45;
Tsyn = 15:2.5:25;

% Create meshgrids
[Ge_grid,Te_grid] = meshgrid(G, Tsyn);
[Gi_grid,Ti_grid] = meshgrid(G, Tsyn);

% Create empty 2D arrays to store results
excite_latency_grid = zeros(size(Ge_grid));
excite_phase_diff_grid = zeros(size(Ge_grid));
inhibit_latency_grid = zeros(size(Gi_grid));
inhibit_phase_diff_grid = zeros(size(Gi_grid));

length_G = length(Ge_grid);
length_T = length(Te_grid);


for i = 1:length_G
    g_syn = G(i);
    for j = 1:length_T
        tauSyn = Tsyn(j);
        
        % Simulate
        simOutexcite = sim('ExcitatoryConnection.slx');
        simOutinhibit = sim('InhibitoryConnection.slx');
        
        % Extract data from the simulation output
        excite_data_A = simOutexcite.spikes_A.data;
        excite_data_B = simOutexcite.spikes_B.data;
        inhibit_data_A = simOutinhibit.spikes_A.data;
        inhibit_data_B = simOutinhibit.spikes_B.data;
        
        [excite_latency, excite_phase_diff] = characterise_latency(dt, excite_data_A, excite_data_B);
        [inhibit_latency, inhibit_phase_diff] = characterise_latency(dt, inhibit_data_A, inhibit_data_B);

        % Store the computed values in the grid
        excite_latency_grid(j, i) = excite_latency;
        excite_phase_diff_grid(j, i) = excite_phase_diff;
        inhibit_latency_grid(j, i) = inhibit_latency;
        inhibit_phase_diff_grid(j, i) = inhibit_phase_diff;
    end
end

% Plotting all the contour plots in one figure

% Create a new figure
figure('Position', [100, 100, 800, 800]);

subplot(1, 2, 1);
contourf(Ge_grid, Te_grid, excite_latency_grid, 'LineColor', 'none', 'LineStyle', 'none');
colorbar;
xlabel('Excitatory Conductance, g\_syn\_excitatory');
ylabel('Excitatory Time Constant, tauSyn\_excitatory');
title('Excitatory Connection Burst Latency (s)', 'FontSize', 10, 'Interpreter', 'latex');

subplot(1, 2, 2);
contourf(Ge_grid, Te_grid, excite_phase_diff_grid, 'LineColor', 'none', 'LineStyle', 'none');
colorbar;
xlabel('Excitatory Conductance, g\_syn\_excitatory');
ylabel('Excitatory Time Constant, tauSyn\_excitatory');
title('Excitatory Connection Phase Difference (deg)', 'FontSize', 10, 'Interpreter', 'latex');

% Adjust the layout of subplots
sgtitle('Excitatory Behaviour for different g\_syn and $\tau_{syn}$, ($\tau_s = 2.5, \tau_{us} = 220$)', 'FontSize', 14, 'Interpreter', 'latex');

% Create a new figure
figure('Position', [100, 100, 800, 800]);

subplot(1, 2, 1);
contourf(Gi_grid, Ti_grid, inhibit_latency_grid, 'LineColor', 'none', 'LineStyle', 'none');
colorbar;
xlabel('Inhibitory Conductance, g\_syn\_inhibitory');
ylabel('Inhibitory Time Constant, tauSyn\_inhibitory');
title('Inhibitory Connection Burst Latency (s)', 'FontSize', 10, 'Interpreter', 'latex');

subplot(1, 2, 2);
contourf(Gi_grid, Ti_grid, inhibit_phase_diff_grid, 'LineColor', 'none', 'LineStyle', 'none');
colorbar;
xlabel('Inhibitory Conductance, g\_syn\_inhibitory');
ylabel('Inhibitory Time Constant, tauSyn\_inhibitory');
title('Inhibitory Connection Phase Difference (deg)','FontSize', 10);
colormap('parula');

% Adjust the layout of subplots
sgtitle('Inhibitory Behaviour for different g\_syn and $\tau_{syn}$, ($\tau_s = 1.5, \tau_{us} = 220$)', 'FontSize', 14, 'Interpreter', 'latex');

set(gcf, 'Color', 'w');
set(findall(gcf, 'type', 'axes'), 'FontSize', 10);